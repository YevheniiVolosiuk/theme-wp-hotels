// Підключення шрифту
@mixin font($font_name, $file_name, $weight, $style) {
  @font-face {
    font-family: $font_name;
    font-style: #{$style};
    font-weight: #{$weight};
    src:
					url("#{$static-base-dir}/static/fonts/#{$file_name}.woff2") format("woff2"),
    url("#{$static-base-dir}/fonts/#{$file_name}.woff") format("woff");
    font-display: swap;
  }
}

// Currency
@mixin currency($sym) {
  &::after {
    content: "#{$sym}";
  }
}

// Grids
@mixin gridCards($type: fit, $min: 280px, $max: 1fr, $gap: 30px) {
  display: grid;
  grid-template-columns: repeat(auto-#{$type}, minmax($min, $max));
  gap: $gap;
}

// Адаптивна властивість (clamp)
@mixin adaptiveValue($property, $startSize, $minSize, $keepSize: 0, $widthFrom: $containerWidth, $widthTo: $minWidth) {
  @if $startSize==0 {
    $startSize: 0.000001;
  }

  @if $minSize==0 {
    $minSize: 0.000001;
  }

  // Для calc();
  $addSize: math.div($startSize - $minSize, 16);

  @if $widthFrom == $containerWidth and $maxWidthContainer == 0 {
    $widthFrom: $maxWidth;
  }

  // Брейк-поїнти в EM
  $widthFromMedia: em($widthFrom);
  $widthToMedia: em($widthTo);

  // Формула плаваючого значення
  // Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
  $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
  $yIntersection: -$widthTo * $slope + $minSize;

  @if $yIntersection==0 {
    $yIntersection: 0.000001;
  }

  $flyValue: #{toRem($yIntersection)}" + " #{$slope * 100}vw;

  // Отримання значення властивості
  $propertyValue: #{"clamp(" toRem($minSize) "," $flyValue "," toRem($startSize) ")"};

  // Якщо негативні значення
  @if $minSize > $startSize {
    $propertyValue: #{"clamp(" toRem($startSize) "," $flyValue "," toRem($minSize) ")"};
  }

  // Встановлюємо значення за замовчуванням
  @if $keepSize != 1 and $keepSize != 3 {
    @media (min-width: $widthFromMedia) {
      #{$property}: toRem($startSize);
    }
  }

  // Адаптуємо розмір у проміжку між зазначеними ширинами в'юпорту
  @media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
    // Якщо підтримується clamp();
    @supports (#{$property}: $propertyValue) {
      #{$property}: $propertyValue;
    }

    // Якщо не підтримується clamp();
    @supports not (#{$property}: $propertyValue) {
      #{$property}: calc(#{toRem($minSize)} + #{$addSize} * (100vw - #{toRem($widthTo)}) / #{math.div($widthFrom, 16) - math.div($widthTo, 16)});
    }
  }

  @if $keepSize != 1 and $keepSize != 2 {
    @media (max-width: $widthToMedia) {
      #{$property}: toRem($minSize);
    }
  }
}


// Three-point leader
// @mixin line-clamp($num, $num-sp: null) {
//   display: -webkit-box;
//   -webkit-box-orient: vertical;
//   -webkit-line-clamp: $num;
//   overflow: hidden;

//   @if $num-sp {
//     @include sp {
//       -webkit-line-clamp: $num-sp;
//     }
//   }
// }

// // Hover applies only to devices that are capable
// @mixin hover {
//   @media (hover: hover) and (pointer: fine) {
//     &:hover {
//       @content;
//     }
//   }
// }

// // Media query
// @mixin mq_free($bp: map-get($breakpoints, md)) {
//   @media screen and (max-width: #{$bp}px) {
//     @content;
//   }
// }

// @mixin pc() {
//   @media screen and (min-width: #{map-get($breakpoints, lg)}) {
//     @content;
//   }
// }

// @mixin tab() {
//   @media screen and (max-width: #{map-get($breakpoints, lg)}) {
//     @content;
//   }
// }

// @mixin sp() {
//   @media screen and (max-width: #{map-get($breakpoints, md)}) {
//     @content;
//   }
// }
